package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"math/rand"
	"my-graphql-server/graph/model"
	"strconv"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	// panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
	todo := &model.Todo{
		ID:   strconv.Itoa(rand.Int()),
		Text: input.Text,
		Done: false,
		User: &model.User{
			ID:   input.UserID,
			Name: "Temp-User",
		},
	}
	r.TodoList = append(r.TodoList, todo)
	return todo, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.QueryInput) (*model.UserEducation, error) {
	// panic(fmt.Errorf("not implemented: CreateUser - createUser"))
	user := &model.UserEducation{
		ID:         strconv.Itoa(rand.Int()),
		School:     input.School,
		Graduation: input.Graduation,
	}
	r.UserList = append(r.UserList, user)
	return user, nil
}

// CreateCar is the resolver for the createCar field.
func (r *mutationResolver) CreateCar(ctx context.Context, input model.QueryCarDetails) (*model.Cars, error) {
	// panic(fmt.Errorf("not implemented: CreateCar - createCar"))
	car := &model.Cars{
		Brand:   input.Brand,
		Model:   input.Model,
		Price:   input.Price,
		MfdYear: input.MfdYear,
	}
	r.CarsList = append(r.CarsList, car)
	return car, nil
}

// CreatePatient is the resolver for the createPatient field.
func (r *mutationResolver) CreatePatient(ctx context.Context, input model.QueryPatientInput) (*model.Patient, error) {
	var id int
	err := r.Resolver.DB.QueryRow(
		"INSERT INTO patients (first_name, last_name) VALUES ($1, $2) RETURNING id",
		input.FirstName, input.LastName,
	).Scan(&id)

	if err != nil {
		return nil, err
	}

	return &model.Patient{
		ID:        strconv.Itoa(id),
		FirstName: input.FirstName,
		LastName:  input.LastName,
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	// panic(fmt.Errorf("not implemented: Todos - todos"))
	fmt.Print("Hi")
	return r.TodoList, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) ([]*model.UserEducation, error) {
	// panic(fmt.Errorf("not implemented: User - user"))
	return r.UserList, nil
}

// Cars is the resolver for the cars field.
func (r *queryResolver) Cars(ctx context.Context) ([]*model.Cars, error) {
	// panic(fmt.Errorf("not implemented: Cars - cars"))
	return r.CarsList, nil
}

// Patients is the resolver for the patients field.
func (r *queryResolver) Patients(ctx context.Context) ([]*model.Patient, error) {
	// panic(fmt.Errorf("not implemented: Patients - patients"))
	rows, err := r.Resolver.DB.Query("SELECT id, first_name, last_name FROM patients")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var patients []*model.Patient
	for rows.Next() {
		var p model.Patient
		err := rows.Scan(&p.ID, &p.FirstName, &p.LastName)
		if err != nil {
			return nil, err
		}
		patients = append(patients, &p)
	}
	return patients, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
